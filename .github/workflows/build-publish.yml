name: Build and Publish to Docker Hub

on:
  push:
    branches:
      - master
  workflow_dispatch:

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  # Set to "latest" for master branch, or branch name for other branches
  IMAGE_TAG: ${{ github.ref_name == 'master' && 'latest' || github.ref_name }}
  DOCKER_REPO: ersanjeev/devops-challanges  # Replace with your Docker Hub repository

jobs:
  build-and-publish:
    name: Build and Publish to Docker Hub
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Infer Tag from Branch
        id: infer-tag
        # Get the branch name from the ref, and replace / with - to make it a valid tag
        env:
          BRANCH_NAME: ${{ github.ref_name }}
        run: |
          if [[ $BRANCH_NAME == "master" ]]; then
            echo "tag=latest" >> $GITHUB_OUTPUT
          else
            echo "tag=$(echo $BRANCH_NAME | sed -e 's/\//-/g')" >> $GITHUB_OUTPUT
          fi

      - name: Build and Push Docker Image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile  # Update path if Dockerfile is not in ./docker/
          pull: true
          push: true
          tags: |
            ${{ env.DOCKER_REPO }}:${{ steps.infer-tag.outputs.tag }},
            ${{ env.DOCKER_REPO }}:${{ github.sha }}

          # Copy Docker image to AWS server
      # - name: Copy Docker image to remote server
      #   run: |
      #     docker save  ${{ env.DOCKER_REPO }}:${{ github.sha }} | bzip2 | ssh -i ${{ secrets.SSH_KEY }} ${{ secrets.AWS_USER }}@${{ secrets.AWS_SERVER }} "bunzip2 | docker load"

    # SSH to AWS server and apply Kubernetes manifests
      - name: Deploy to Minikube
        run: |
          ssh -i ${{ secrets.SSH_KEY }} ${{ secrets.AWS_USER }}@${{ secrets.AWS_SERVER }} << EOF
          sudo -i 
          cd /root/DevOps-Challenge/k8s-manifests
          kubectl apply -f .
          EOF


